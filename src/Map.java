import com.sun.xml.internal.bind.v2.TODO;

import java.util.ArrayList;
import java.util.Arrays;

/**
 * Created by BChilds on 1/27/17.
 */
public class Map {
    /*
    This class:
    - generates a map to output
    - Processes moves and actions
    - checks Mine states and ship position
    - generates new map to output
    - iterates to next move/action

    Takes in a list of commands and a list of Mines, uses this to generate map size and ship coordinates
        A movement is actually a change in map size, as ship is always center of the map
    */

    //Map HAS A list of mines generated by Inputs

    //Elements
    ArrayList<Mine> mineArrayList = new ArrayList<>();
    ArrayList<String> commandArrayList = new ArrayList<>();
    int[] mapDimension = new int[2];

    //Constructor requires an Input
    public Map(Inputs input){
       getMines(input);
       getCommands(input);
    }

    //get initial list of mines from Input and save to mineArrayList
    public void getMines(Inputs input){
        mineArrayList = input.generateMineList(input.fields1);
    }
    //get starting command list generated by Input
    public void getCommands(Inputs input){
       commandArrayList = input.generateCommandList();
    }

    //build map and output
    public void printMap(){
        mapDimension = getMapDimensions();
        Ship.centerShip(mapDimension);   //centers the ship on the new dimensions

        //create character array for map
        char[][] newMap = new char[mapDimension[0]][mapDimension[1]];
        for(int i = 0; i < newMap.length; i++){
            Arrays.fill(newMap[i],'.'); //fills the map with '.'
        }
        //get all the mine characters and print to map
        for(Mine mine:mineArrayList){
            //remember, mine[1] is its Y coord, which is which char[] it should be in
            //mine[0] is its X coord, which is what place in the char[] it is in
            newMap[mine.getCoords()[1]][mine.getCoords()[0]] =  mine.getChar();
        }

        //TODO print map to output file?
        //temporary - print map to console
        for(char[] lineY: newMap){  //goes through each char array in newMap, which = y-coord
            for(char c: lineY){     //goes through each char in a char array, which = x-coord
                System.out.print(c);
            }
            System.out.print("\n");
        }
    }


    private int[] getMapDimensions(){
        //gets dimensions for the map based on the mines
        //{xmin, xmax, ymin, ymax}
        int[] dims = {0,0,0,0};
        int[] out = new int[2];

        //iterate through mines, get max/min X and max/min Y
        for(Mine mine: mineArrayList){
            int[] tempCoords = mine.getCoords();

            //check X min/max
            if(tempCoords[0] < dims[0]){
                dims[0] = tempCoords[0];
            } else if(tempCoords[0] > dims[1]){
                dims[1] = tempCoords[0];
            }
            //check Y min/max
            if(tempCoords[1] < dims[2]){
                dims[2] = tempCoords[1];
            } else if(tempCoords[0] > dims[3]){
                dims[3] = tempCoords[1];
            }
        }
        /*
        //check the current Ship coordinates

        //if the difference between max/mins is even, add one
        if((dims[1]-dims[0])%2 == 0){
            dims[1]+=1;
        }
        if((dims[3]-dims[2])%2 == 0){
            dims[3]+=1;
        }

        out[0] = dims[1]-dims[0];
        out[1] = dims[3]-dims[2];
        */
        return out; //return an {x,y}
    }

    //TODO: make a method to go through each command and do its action
    public void doAllCommands(){

    }

    //TODO: make a method which details what each command does
    //TODO: ship doesn't exist. Need to make the map size change based on move commands and mines?
    public void commandDetails(String commIn){
        switch(commIn){
            case "North":
                Ship.moveCoords(new int[]{0,1});
                break;
            case "South":
                Ship.moveCoords(new int[]{0,-1});
                break;
            case "East":
                Ship.moveCoords(new int[]{1,0});
                break;
            case "West":
                Ship.moveCoords(new int[]{-1,0});
                break;
            case "Alpha":
                break;
            case "Beta":
                break;
            case "Delta":
                break;
            case "Gamma":
                break;
            case "Increment":
                break;
        }
    }

    //Method to take in an int[] array of (Ship) coordinates and compare them to all mines, destroying matches
    public void destroyMines(int[] missileCoords){
        for(Mine mine: mineArrayList){
            if(Arrays.equals(mine.getCoords(), missileCoords)){
                mine.destroyMine();
            }
        }
    }

    //TODO Add logic for pass failure
    //Check mines for passed. Need further logic
    public void checkMines(){
        Boolean pass = true;
        for(Mine mine:mineArrayList){
            pass = mine.checkPassed();
            System.out.println(Arrays.toString(mine.getCoords()));
            if(!pass){
                break;
            }
        }

    }
    //Do commands

    //Decrement Z's of mines
    public void decrementMines(){
        for(Mine mine:mineArrayList){
            mine.decrementZ();
        }
    }


}
