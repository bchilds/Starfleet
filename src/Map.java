package starfleet;


import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * Created by BChilds on 1/27/17.
 */
public class Map {
    /*
    This class:
    - generates a map to output
    - Processes moves and actions
    - checks starfleet.Mine states and ship position
    - generates new map to output
    - iterates to next move/action

    Takes in a list of commands and a list of Mines, uses this to generate map size and ship coordinates
        A movement is actually a change in map size, as ship is always center of the map
    */

    //starfleet.Map HAS A list of mines generated by starfleet.Inputs

    //Elements, some public for unit testing, rather than making getter methods
    public ArrayList<Mine> mineArrayList = new ArrayList<>();
    public ArrayList<String> commandArrayList = new ArrayList<>();
    public int[] mapDimension = new int[2];
    int[][] alpha = new int[][] {{-1,-1},{-1,1},{1,-1},{1,1}};
    int[][] beta = new int[][] {{-1,0},{0,-1},{1,0},{0,1}};
    int[][] gamma = new int[][] {{-1,0},{0,0},{1,0}};
    int[][] delta = new int[][] {{0,1},{0,0},{0,-1}};


    //Constructor requires an Input
    public Map(Inputs input){
       getMines(input);
       mapDimension = input.mapDims;
       getCommands(input);
    }

    //get initial list of mines from Input and save to mineArrayList
    public void getMines(Inputs input){
        mineArrayList = input.generateMineList(input.fields1);
        /*for(Mine mine:mineArrayList){
            //debug
            System.out.println(Arrays.toString(mine.getCoords()));
        }*/
    }

    //get starting command list generated by Input
    public void getCommands(Inputs input){
       commandArrayList = input.generateCommandList();
    }

    //build map and output
    public void printMap(){
        mapDimension = newMapDimensions();
        Ship.centerShip(mapDimension);   //centers the ship on the new dimensions
        System.out.println("Map dims: " + Arrays.toString(mapDimension));

        //create character array for map
        char[][] newMap = new char[mapDimension[1]][mapDimension[0]];
        for(int i = 0; i < newMap.length; i++){
            Arrays.fill(newMap[i],'.'); //fills the map with '.'
        }

        //get all the mine characters and print to map
        for(Mine mine:mineArrayList){
            if(!mine.destroyed) {
                //need to print mine in the spot relative to center
                newMap[mine.getCoords()[1] + Ship.getCoords()[1]][mine.getCoords()[0] + Ship.getCoords()[0]] = mine.getChar();
            }
        }

        //TODO print map to output file?
        //temporary - print map to console
        for(char[] lineY: newMap){  //goes through each char array in newMap, which = y-coord
            for(char c: lineY){     //goes through each char in a char array, which = x-coord
                System.out.print(c);
            }
            System.out.print("\n");
        }
        System.out.println("\n");
    }

    public int[] newMapDimensions(){
        //gets dimensions for the map based on the mines relative to center
        int[] out = new int[2];

        //get min/max of x and y from mines
        for(Mine mine:mineArrayList){
            if(!mine.destroyed) {
                //I need 2x the maximum distance from the ship rounded to nearest odd number?

                //if the X is less than temp min or greater than max, set
                if (Math.abs(mine.getCoords()[0]) > out[0]) out[0] = Math.abs(mine.getCoords()[0]);

                //if the Y is less than temp min or greater than max, set
                if (Math.abs(mine.getCoords()[1]) > out[1]) out[1] = Math.abs(mine.getCoords()[1]);
            }
        }

        out[0] *= 2;
        if(out[0]%2 == 0){
            out[0]+=1;
        }
        out[1] *= 2;
        if(out[1]%2 == 0){
            out[1]+=1;
        }

        return out; //return an {x,y}
    }

    public void doAllCommands(){
        for (String command:commandArrayList){
            commandDetails(command);
            //TODO: Add checkMines logic to stop everything and pronounce failure
            checkMines();
            printMap();
        }
    }

    public void commandDetails(String commIn){
                switch (commIn) {   //do the command
                    //cases for movement
                    case "North":
                        //ship moves up, all mines move down one relatively
                        for(Mine mine: mineArrayList) {
                            mine.incrementY();
                        }
                        break;
                    case "South":
                        //ship moves down, all mines move up one relatively
                        for(Mine mine: mineArrayList) {
                            mine.decrementY();
                        }
                        break;
                    case "East":
                        //ship moves right, all mines move left one relatively
                        for(Mine mine: mineArrayList) {
                            mine.decrementX();
                        }
                        break;
                    case "West":
                        //ship moves left, all mines move right one relatively
                        for(Mine mine: mineArrayList) {
                            mine.incrementX();
                        }
                        break;

                    case "Alpha":
                        for(int[] i: alpha){
                            destroyMines(i);
                        }
                        break;
                    case "Beta":
                        for(int[] i: beta){
                            destroyMines(i);
                        }
                        break;
                    case "Delta":
                        for(int[] i: delta){
                            destroyMines(i);
                        }
                        break;
                    case "Gamma":
                        for(int[] i: gamma){
                            destroyMines(i);
                        }
                        break;

                    //case for when a line of commands is done
                    case "Increment":
                        for(Mine mine: mineArrayList) {
                            mine.decrementZ();
                        }
                        break;
        }
    }

    //Method to take in an int[] array of (starfleet.Ship) coordinates and compare them to all mines, destroying matches
    public void destroyMines(int[] missileCoords){
        for(Mine mine: mineArrayList){
            if(Arrays.equals(mine.getCoords(), missileCoords)){
                mine.destroyMine();
            }
        }
    }

    //TODO Add logic for pass failure
    //Check mines for passed. Need further logic
    public void checkMines(){
        Boolean pass = true;
        for(Mine mine:mineArrayList){
            pass = mine.checkPassed();
            //System.out.println(Arrays.toString(mine.getCoords()));
            if(!pass){
                System.out.println("FAILURE");
                break;
            }
        }

    }
    //Do commands

    //Decrement Z's of mines
    public void decrementMines(){
        for(Mine mine:mineArrayList){
            mine.decrementZ();
        }
    }


}
